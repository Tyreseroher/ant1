import java.util.ArrayList;
import java.util.List;

public class PowerOfTwoMaxHeap {
    private List<Integer> heap;
    private int numChildrenExponent;
    private int numChildren;

    public PowerOfTwoMaxHeap(int numChildrenExponent) {
        if (numChildrenExponent < 0) {
            throw new IllegalArgumentException("Exponent must be non-negative");
        }
        this.numChildrenExponent = numChildrenExponent;
        this.numChildren = (int) Math.pow(2, numChildrenExponent);
        this.heap = new ArrayList<>();
    }

    public void insert(int value) {
        heap.add(value);
        bubbleUp(heap.size() - 1);
    }

    public int popMax() {
        if (heap.size() == 0) {
            throw new IllegalStateException("Heap is empty");
        }
        int maxValue = heap.get(0);
        int lastValue = heap.remove(heap.size() - 1);
        if (heap.size() > 0) {
            heap.set(0, lastValue);
            bubbleDown(0);
        }
        return maxValue;
    }

    private void bubbleUp(int index) {
        int parentIndex = getParentIndex(index);
        while (index > 0 && heap.get(index) > heap.get(parentIndex)) {
            swap(index, parentIndex);
            index = parentIndex;
            parentIndex = getParentIndex(index);
        }
    }

    private void bubbleDown(int index) {
        int maxIndex = index;
        int firstChildIndex = getChildIndex(index, 0);
        for (int i = 0; i < numChildren; i++) {
            int currentChildIndex = firstChildIndex + i;
            if (currentChildIndex < heap.size() && heap.get(currentChildIndex) > heap.get(maxIndex)) {
                maxIndex = currentChildIndex;
            }
        }
        if (maxIndex != index) {
            swap(index, maxIndex);
            bubbleDown(maxIndex);
        }
    }

    private int getParentIndex(int index) {
        return (index - 1) / numChildren;
    }

    private int getChildIndex(int index, int childOffset) {
        return numChildren * index + 1 + childOffset;
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    // For testing purposes
    public static void main(String[] args) {
        PowerOfTwoMaxHeap heap = new PowerOfTwoMaxHeap(2); // Each node will have 4 children

        heap.insert(10);
        heap.insert(4);
        heap.insert(9);
        heap.insert(1);
        heap.insert(7);
        heap.insert(5);
        heap.insert(3);
        heap.insert(8);

        System.out.println(heap.popMax()); // Should print 10
        System.out.println(heap.popMax()); // Should print 9
        System.out.println(heap.popMax()); // Should print 8
        // Add more test cases as needed
    }
}
